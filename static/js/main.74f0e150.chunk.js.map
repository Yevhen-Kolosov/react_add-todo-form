{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","cn","completed","title","TodoList","todos","map","username","userId","defaultFormErrors","titleErrorMessage","userErrorMessage","defaultFormData","getUser","usersFromServer","find","getNewTodoId","todoIds","Math","max","App","initialTodos","todosFromServer","useState","setTodos","formData","setFormData","formErrors","setFormErrors","setFieldValue","field","value","prevFormData","setErrorMessage","errorProp","message","prevFormErrors","action","method","onSubmit","event","preventDefault","trim","newTodo","currentTodos","addTodo","htmlFor","type","onChange","target","placeholder","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.74f0e150.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a\n      className=\"UserInfo\"\n      href={`mailto:${user.email}`}\n    >\n      {user.name}\n    </a>\n  );\n};\n","import cn from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={cn('TodoInfo',\n        { 'TodoInfo--completed': todo.completed })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n      {todo.user && <UserInfo user={todo.user} />}\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo: Todo) => (\n        <TodoInfo\n          key={todo.id}\n          todo={todo}\n        />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\nimport { FormErrors } from './types/FormErrors';\nimport { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { FormData } from './types/FormData';\n\nconst defaultFormErrors: FormErrors = {\n  titleErrorMessage: '',\n  userErrorMessage: '',\n};\n\nconst defaultFormData: FormData = {\n  title: '',\n  userId: 0,\n};\n\nfunction getUser(userId: number) {\n  return usersFromServer.find((user: User) => userId === user.id) || null;\n}\n\nfunction getNewTodoId(todos: Todo[]) {\n  const todoIds = todos.map(todo => (todo.id));\n\n  return Math.max(...todoIds) + 1;\n}\n\nexport const App: React.FC = () => {\n  const initialTodos: Todo[] = todosFromServer.map(todo => ({\n    ...todo,\n    user: getUser(todo.userId),\n  }));\n\n  const [todos, setTodos] = useState(initialTodos);\n\n  const addTodo = (todo: Todo) => {\n    const newTodo = {\n      ...todo,\n      user: getUser(todo.userId),\n    };\n\n    setTodos(currentTodos => [...currentTodos, newTodo]);\n  };\n\n  const [formData, setFormData] = useState<FormData>(defaultFormData);\n  const [formErrors, setFormErrors] = useState<FormErrors>(defaultFormErrors);\n\n  const clearForm = () => {\n    setFormData(defaultFormData);\n    setFormErrors(defaultFormErrors);\n  };\n\n  const setFieldValue = (field: keyof FormData, value: string | number) => {\n    setFormData((prevFormData: FormData) => ({\n      ...prevFormData,\n      [field]: value,\n    }));\n  };\n\n  const setErrorMessage = (errorProp: keyof FormErrors, message: string) => {\n    setFormErrors((prevFormErrors: FormErrors) => ({\n      ...prevFormErrors,\n      [errorProp]: message,\n    }));\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!(formData.title.trim())) {\n      setErrorMessage('titleErrorMessage', 'Please enter a title');\n    }\n\n    if (!formData.userId) {\n      setErrorMessage('userErrorMessage', 'Please choose a user');\n    }\n\n    if (!(formData.title.trim()) || !formData.userId) {\n      return;\n    }\n\n    addTodo({\n      id: getNewTodoId(todos),\n      title: formData.title,\n      completed: false,\n      userId: formData.userId,\n    });\n\n    clearForm();\n  };\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFieldValue('title', event.target.value);\n    setErrorMessage('titleErrorMessage', '');\n  };\n\n  const handleUserIdChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setFieldValue('userId', +event.target.value);\n    setErrorMessage('userErrorMessage', '');\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"todo-form-title\">Title: </label>\n          <input\n            type=\"text\"\n            id=\"todo-form-title\"\n            data-cy=\"titleInput\"\n            onChange={handleTitleChange}\n            value={formData.title}\n            placeholder=\"Enter a title\"\n          />\n          {formErrors.titleErrorMessage && (\n            <span className=\"error\">{formErrors.titleErrorMessage}</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"todo-form-user\">User: </label>\n          <select\n            id=\"todo-form-user\"\n            data-cy=\"userSelect\"\n            onChange={handleUserIdChange}\n            value={formData.userId}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option key={user.id} value={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {formErrors.userErrorMessage && (\n            <span className=\"error\">{formErrors.userErrorMessage}</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}